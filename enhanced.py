import streamlit as st
from datetime import datetime
import time
import random

# Set page configuration
st.set_page_config(
    page_title="AI Chatbot",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Custom CSS for better chatbot UI
st.markdown("""
<style>
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: flex-start;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: 20%;
        flex-direction: row-reverse;
    }
    
    .bot-message {
        background-color: #f1f3f4;
        color: #333;
        margin-right: 20%;
    }
    
    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        margin: 0 0.5rem;
        flex-shrink: 0;
    }
    
    .user-avatar {
        background-color: #0056b3;
    }
    
    .bot-avatar {
        background-color: #6c757d;
    }
    
    .message-content {
        flex-grow: 1;
        padding: 0 0.5rem;
    }
    
    .message-time {
        font-size: 0.8rem;
        opacity: 0.7;
        margin-top: 0.25rem;
    }
    
    .stTextInput > div > div > input {
        border-radius: 25px;
    }
    
    .chat-container {
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem 0;
        border: 1px solid #e6e6e6;
        border-radius: 10px;
        background-color: #fafafa;
        margin-bottom: 1rem;
    }
    
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 1rem;
        font-style: italic;
        color: #666;
    }
    
    .typing-dots {
        display: inline-block;
        margin-left: 0.5rem;
    }
    
    .typing-dots span {
        display: inline-block;
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background-color: #666;
        margin: 0 1px;
        animation: typing 1.4s infinite;
    }
    
    .typing-dots span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-dots span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @keyframes typing {
        0%, 60%, 100% {
            transform: translateY(0);
        }
        30% {
            transform: translateY(-10px);
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []
    # Add welcome message
    st.session_state.messages.append({
        "role": "assistant",
        "content": "Hello! I'm your AI assistant. How can I help you today?",
        "timestamp": datetime.now().strftime("%H:%M")
    })

if "is_typing" not in st.session_state:
    st.session_state.is_typing = False

def get_bot_response(user_message):
    """
    Dummy response function that returns static responses.
    Replace this function with your actual AI/chatbot logic later.
    """
    
    # Simulate some processing time
    time.sleep(1)
    
    # List of dummy responses
    dummy_responses = [
        "That's an interesting question! I'm currently in demo mode, so I'm giving you a sample response.",
        "I understand what you're saying. This is a placeholder response that you can replace with actual AI logic.",
        "Thanks for your message! Right now I'm using dummy responses, but you can integrate any AI model here.",
        "I'm processing your request... Actually, I'm just a demo bot returning random responses for now!",
        "Your message has been received! This response is generated by a simple dummy function.",
        "Interesting! I'm designed to give helpful responses, but currently I'm in test mode.",
        "I appreciate your input! Once you integrate a real AI model, I'll be much more helpful.",
        "That's a great point! For now, I'm just cycling through pre-written responses.",
        "I'm here to help! Though currently I'm just a placeholder until you add real functionality.",
        "Got it! This dummy response will be replaced when you implement your actual chatbot logic."
    ]
    
    # You can also add simple keyword-based responses
    user_message_lower = user_message.lower()
    
    if any(word in user_message_lower for word in ["hello", "hi", "hey", "greetings"]):
        return "Hello there! Nice to meet you. I'm currently running in demo mode!"
    
    elif any(word in user_message_lower for word in ["how are you", "how do you do"]):
        return "I'm doing great, thank you for asking! I'm a demo chatbot ready to be upgraded."
    
    elif any(word in user_message_lower for word in ["bye", "goodbye", "see you"]):
        return "Goodbye! It was nice chatting with you. See you next time!"
    
    elif any(word in user_message_lower for word in ["help", "what can you do"]):
        return "I'm currently a demo chatbot with placeholder responses. Once you integrate real AI, I'll be able to help with many tasks!"
    
    elif any(word in user_message_lower for word in ["weather", "temperature"]):
        return "I'd love to help with weather information! Right now I'm just a demo, but you could integrate a weather API here."
    
    elif any(word in user_message_lower for word in ["time", "date"]):
        current_time = datetime.now().strftime("%I:%M %p on %B %d, %Y")
        return f"The current time is {current_time}"
    
    else:
        # Return a random response for other messages
        return random.choice(dummy_responses)

# App header
st.title("ü§ñ AI Chatbot")
st.markdown("*Powered by LetsUpgrade - Demo Version*")
st.markdown("---")

# Chat container
chat_container = st.container()

with chat_container:
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    # Display messages
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.markdown(f"""
            <div class="chat-message user-message">
                <div class="message-avatar user-avatar">üë§</div>
                <div class="message-content">
                    <div>{message["content"]}</div>
                    <div class="message-time">{message["timestamp"]}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="chat-message bot-message">
                <div class="message-avatar bot-avatar">ü§ñ</div>
                <div class="message-content">
                    <div>{message["content"]}</div>
                    <div class="message-time">{message["timestamp"]}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Show typing indicator if bot is typing
    if st.session_state.is_typing:
        st.markdown(f"""
        <div class="chat-message bot-message">
            <div class="message-avatar bot-avatar">ü§ñ</div>
            <div class="message-content">
                <div class="typing-indicator">
                    Bot is typing<span class="typing-dots"><span></span><span></span><span></span></span>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

# Input section
st.markdown("### üí¨ Send a message")

# Create input form
with st.form(key="chat_form", clear_on_submit=True):
    col1, col2 = st.columns([5, 1])
    
    with col1:
        user_input = st.text_input(
            "Type your message here...",
            placeholder="Ask me anything!",
            label_visibility="collapsed"
        )
    
    with col2:
        send_button = st.form_submit_button("Send", type="primary", use_container_width=True)

# Handle message sending
if send_button and user_input.strip():
    # Add user message
    current_time = datetime.now().strftime("%H:%M")
    st.session_state.messages.append({
        "role": "user",
        "content": user_input.strip(),
        "timestamp": current_time
    })
    
    # Set typing indicator
    st.session_state.is_typing = True
    st.rerun()

# Process bot response (this runs after rerun when typing indicator is shown)
if st.session_state.is_typing:
    # Get bot response using dummy function
    bot_response = get_bot_response(st.session_state.messages[-1]["content"])
    
    # Add bot response
    current_time = datetime.now().strftime("%H:%M")
    st.session_state.messages.append({
        "role": "assistant",
        "content": bot_response,
        "timestamp": current_time
    })
    
    # Remove typing indicator
    st.session_state.is_typing = False
    st.rerun()

# Sidebar with controls
with st.sidebar:
    st.header("üõ†Ô∏è Chat Controls")
    
    if st.button("üóëÔ∏è Clear Chat", use_container_width=True):
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "assistant",
            "content": "Hello! I'm your AI assistant. How can I help you today?",
            "timestamp": datetime.now().strftime("%H:%M")
        })
        st.session_state.is_typing = False
        st.rerun()
    
    st.markdown("---")
    
    # Chat statistics
    st.header("üìä Chat Stats")
    total_messages = len(st.session_state.messages)
    user_messages = len([m for m in st.session_state.messages if m["role"] == "user"])
    bot_messages = len([m for m in st.session_state.messages if m["role"] == "assistant"])
    
    st.metric("Total Messages", total_messages)
    st.metric("Your Messages", user_messages)
    st.metric("Bot Messages", bot_messages)
    
    st.markdown("---")
    
    # Export chat
    st.header("üíæ Export Chat")
    if st.button("üìÑ Download Chat History", use_container_width=True):
        if st.session_state.messages:
            chat_content = "CHATBOT CONVERSATION\n" + "="*50 + "\n\n"
            for msg in st.session_state.messages:
                role = "You" if msg["role"] == "user" else "Bot"
                chat_content += f"[{msg['timestamp']}] {role}: {msg['content']}\n\n"
            
            st.download_button(
                label="üíæ Download as TXT",
                data=chat_content,
                file_name=f"chatbot_conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain",
                use_container_width=True
            )
    
    st.markdown("---")
    
    # Developer info
    st.header("üë®‚Äçüíª Developer Notes")
    st.info(
        "**To modify the bot responses:**\n\n"
        "1. Edit the `get_bot_response()` function\n"
        "2. Replace dummy responses with your AI logic\n"
        "3. Integrate APIs, models, or databases\n"
        "4. Add more sophisticated response handling"
    )
    
    with st.expander("üîß Current Features"):
        st.write("‚úÖ Real-time chat interface")
        st.write("‚úÖ Typing indicators")
        st.write("‚úÖ Message timestamps")
        st.write("‚úÖ Chat history persistence")
        st.write("‚úÖ Export functionality")
        st.write("‚úÖ Responsive design")
        st.write("‚úÖ Keyword-based responses")
        st.write("‚úÖ Easy function modification")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666; font-size: 0.8rem;'>"
    "ü§ñ Streamlit Chatbot Demo | Replace get_bot_response() function with your AI logic"
    "</div>", 
    unsafe_allow_html=True
)